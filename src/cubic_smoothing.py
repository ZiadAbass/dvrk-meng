'''
Created by Ziad Abass

Purpose: Perform cubic spline interpolation on a given set of points that form a trajectory to smooth it out.
The steps taken are documented in the report in the relevant section
'''

from scipy.interpolate import interp1d
import numpy as np

'''
cubic_smooth() smooths out a given trajectory using a cubic spline technique.
It can also interpolate between points. This can be done by defining a higher number for op_count.
Args:
    - traj: The input trajectory to smooth. Given in the form of a list of [[6 motor angles], [6 motor angles], ...].
    - kp_count defines the number of key points used for spline smoothing.
    - op_count defines the number of points in the output. Default is that number of input points = number of output points.
'''
def cubic_smooth(traj, kp_count, op_count=-1):
    input_Y = traj
    # find C number of values between 0 and 1, where C is the equal to the number of points in the traj
    X = np.linspace(0, 1, input_Y.shape[0], endpoint=True)
    # create a function based on the fixed data points provided and interpolate to find missing points inbetween while following the curvature.
    fY = interp1d(X, input_Y.T, kind='linear')
    # find D number of values between 0 and 1, where D is the equal to the number of key points used for spline smoothing
    x_keypoints = np.linspace(0, 1, kp_count)
    # use the curvature interpolation function created above to find a corresponding value for each input point
    y_keypoints = fY(x_keypoints)
    # if user did not provide a desired number of output points then let that equal to the number of input points
    if op_count == -1:
        op_count = len(X)
    C = interp1d(x_keypoints, y_keypoints, kind='cubic')
    # interpolate for the final list of points following a cubic spline and return it
    smoothed_Y = C(np.linspace(0, 1, op_count, endpoint=True)).T    
    return smoothed_Y


# Example use:
traj = [[-0.0126769741250813, 0.009814941299482969, 0.12015569984015868, 0.8807718841173641, -0.2019849945824857, -0.08280517272872003], [-0.012675006412307413, 0.009816101575265036, 0.12015601153617946, 0.880773991686091, -0.20198120859646207, -0.08280708651476618], [-0.012673038699533524, 0.009817261851047105, 0.12015632323220024, 0.8807760992548181, -0.20197742261043844, -0.08280900030081233], [-0.012671070986759637, 0.009818422126829172, 0.12015663492822101, 0.8807782068235451, -0.20197363662441484, -0.08281091408685846], [-0.01266910327398575, 0.00981958240261124, 0.1201569466242418, 0.8807803143922721, -0.2019698506383912, -0.08281282787290462], [-0.012667135561211861, 0.009820742678393309, 0.12015725832026257, 0.8807824219609991, -0.20196606465236758, -0.08281474165895077], [-0.012665167848437974, 0.009821902954175376, 0.12015757001628335, 0.8807845295297262, -0.20196227866634395, -0.08281665544499692], [-0.012663200135664087, 0.009823063229957444, 0.12015788171230413, 0.8807866370984532, -0.20195849268032035, -0.08281856923104305], [-0.012661232422890198, 0.009824223505739513, 0.12015819340832491, 0.8807887446671802, -0.20195470669429672, -0.0828204830170892], [-0.012659264710116311, 0.00982538378152158, 0.12015850510434568, 0.8807908522359071, -0.20195092070827309, -0.08282239680313536], [-0.012657296997342424, 0.00982654405730365, 0.12015881680036647, 0.8807929598046342, -0.20194713472224946, -0.08282431058918151], [-0.012655329284568535, 0.009827704333085717, 0.12015912849638724, 0.8807950673733612, -0.20194334873622585, -0.08282622437522764], [-0.012653361571794648, 0.009828864608867784, 0.12015944019240803, 0.8807971749420882, -0.20193956275020222, -0.0828281381612738], [-0.012651393859020761, 0.009830024884649853, 0.1201597518884288, 0.8807992825108152, -0.2019357767641786, -0.08283005194731995], [-0.012649426146246872, 0.00983118516043192, 0.12016006358444958, 0.8808013900795423, -0.20193199077815496, -0.0828319657333661], [-0.012647458433472985, 0.009832345436213988, 0.12016037528047036, 0.8808034976482693, -0.20192820479213136, -0.08283387951941223], [-0.012645490720699098, 0.009833505711996057, 0.12016068697649113, 0.8808056052169962, -0.20192441880610773, -0.08283579330545839], [-0.01264352300792521, 0.009834665987778124, 0.12016099867251191, 0.8808077127857232, -0.2019206328200841, -0.08283770709150454], [-0.012641555295151322, 0.009835826263560192, 0.12016131036853268, 0.8808098203544503, -0.20191684683406047, -0.08283962087755069], [-0.012639587582377435, 0.00983698653934226, 0.12016162206455347, 0.8808119279231773, -0.20191306084803687, -0.08284153466359682], [-0.012637619869603546, 0.009838146815124328, 0.12016193376057424, 0.8808140354919043, -0.20190927486201324, -0.08284344844964298], [-0.01263565215682966, 0.009839307090906396, 0.12016224545659503, 0.8808161430606313, -0.2019054888759896, -0.08284536223568913], [-0.012633684444055772, 0.009840467366688465, 0.1201625571526158, 0.8808182506293584, -0.20190170288996598, -0.08284727602173528], [-0.012631716731281883, 0.009841627642470532, 0.12016286884863658, 0.8808203581980854, -0.20189791690394235, -0.08284918980778143], [-0.012629749018507996, 0.0098427879182526, 0.12016318054465736, 0.8808224657668123, -0.20189413091791875, -0.08285110359382757], [-0.01262778130573411, 0.009843948194034668, 0.12016349224067814, 0.8808245733355393, -0.20189034493189512, -0.08285301737987372], [-0.01262581359296022, 0.009845108469816736, 0.12016380393669891, 0.8808266809042664, -0.20188655894587149, -0.08285493116591987], [-0.012623845880186333, 0.009846268745598803, 0.1201641156327197, 0.8808287884729934, -0.20188277295984786, -0.08285684495196602], [-0.012621878167412445, 0.009847429021380872, 0.12016442732874047, 0.8808308960417204, -0.20187898697382425, -0.08285875873801216], [-0.012619910454638558, 0.00984858929716294, 0.12016473902476126, 0.8808330036104474, -0.20187520098780062, -0.08286067252405831]]
smoothed_traj = cubic_smooth(np.array(traj), 5)
print("Smoothed traj has", len(smoothed_traj), "points. Initial traj had", len(traj),"points.")